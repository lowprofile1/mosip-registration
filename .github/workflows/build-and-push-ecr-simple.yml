name: Build and Push to ECR (Simple)

on:
  push:
    branches: [master, develop, main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 921436147132.dkr.ecr.us-east-1.amazonaws.com
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository

jobs:
  # Build Maven artifacts first
  build-maven:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for git diff

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: "11"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build Maven project
        working-directory: ./registration-processor
        run: |
          mvn clean compile -DskipTests
          mvn package -DskipTests

      - name: Upload Maven artifacts
        uses: actions/upload-artifact@v4
        with:
          name: maven-artifacts
          path: |
            registration-processor/*/target/*.jar
            registration-processor/*/target/*.war
          retention-days: 1

  # Build and push Docker images for core services
  build-and-push:
    needs: build-maven
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service_name: registration-processor-workflow-manager-service
            service_path: registration-processor/workflow-engine/registration-processor-workflow-manager-service
            port: 8081
          - service_name: registration-processor-stage-group-1
            service_path: registration-processor/stage-groups/registration-processor-stage-group-1
            port: 8081
          - service_name: registration-processor-registration-status-service
            service_path: registration-processor/init/registration-processor-registration-status-service
            port: 8081
          - service_name: registration-processor-notification-service
            service_path: registration-processor/registration-processor-notification-service
            port: 8081
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Maven artifacts
        uses: actions/download-artifact@v4
        with:
          name: maven-artifacts
          path: ./artifacts

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        working-directory: ./${{ matrix.service_path }}
        run: |
          # Find the JAR file
          JAR_FILE=$(find ../../artifacts -name "*${{ matrix.service_name }}*.jar" | head -1)

          if [ -z "$JAR_FILE" ]; then
            echo "No JAR file found for ${{ matrix.service_name }}"
            exit 1
          fi

          echo "Found JAR file: $JAR_FILE"

          # Copy JAR to current directory
          cp "$JAR_FILE" ./target/

          # Build Docker image
          docker build -t ${{ env.ECR_REGISTRY }}/mosip-${{ matrix.service_name }}:${{ github.sha }} .
          docker build -t ${{ env.ECR_REGISTRY }}/mosip-${{ matrix.service_name }}:latest .

          # Push to ECR
          docker push ${{ env.ECR_REGISTRY }}/mosip-${{ matrix.service_name }}:${{ github.sha }}
          docker push ${{ env.ECR_REGISTRY }}/mosip-${{ matrix.service_name }}:latest

          echo "Successfully built and pushed ${{ matrix.service_name }}"
